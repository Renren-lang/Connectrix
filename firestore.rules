rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow authenticated users to read other user profiles for browsing
      allow read: if request.auth != null;
    }
    
    // Chat rules
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.participants;
      
      // Allow creating new chats
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.participants;
    }
    
    // Message rules within chats - FIXED SECURITY ISSUE
    match /chats/{chatId}/messages/{messageId} {
      // Only allow access if user is authenticated and is a participant in the chat
      allow read, write: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      
      // Allow creating new messages only if user is a chat participant
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }
    
    // Forum threads and posts
    match /threads/{threadId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    match /threads/{threadId}/posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.authorId;
    }
    
    // Events
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        (resource.data.organizerId == request.auth.uid || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'alumni');
      allow update, delete: if request.auth != null && 
        resource.data.organizerId == request.auth.uid;
    }
    
    // Mentorship requests
    match /mentorship-requests/{requestId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.studentId || 
         request.auth.uid == resource.data.mentorId);
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.studentId || 
         request.auth.uid == resource.data.mentorId);
    }
    
    // Notification rules
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
        request.auth.uid == resource.data.recipientId;
      
      allow write: if request.auth != null && 
        request.auth.uid == resource.data.recipientId;
      
      // Allow creating notifications for any authenticated user
      allow create: if request.auth != null;
    }
    
    // User status for online/offline functionality
    match /userStatus/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Default: no access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}